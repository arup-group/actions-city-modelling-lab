name: Reusable conda package builder

on:
  workflow_call:
    inputs:
      package_name:
        description: "Name of Python package name being built"
        required: true
        type: string
      version:
        description: "Version to be packaged and uploaded"
        required: false
        type: string
        default: ${{ github.ref_name }}
      environment:
        description: "GitHub environment in which secrets are stored"
        type: string
        default: "pre-release"
      pip_args:
        description: "Any arguments to pass to pip when running test installations"
        required: false
        type: string
        default: "--no-deps"

    secrets:
      TEST_PYPI_API_TOKEN:
        required: true

defaults:
  run:
    shell: bash -l {0}

env:
  PACKAGENAME: "pip-build-${{ inputs.package_name }}-${{ inputs.version }}"

jobs:
  pip-build:
    runs-on: ubuntu-latest
    steps:
    - name: check if TEST_PYPI_API_TOKEN exists
      env:
        # cannot use secrets directly in conditionals
        # see https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions#using-secrets-in-a-workflow
        test_pypi_token: ${{ secrets.TEST_PYPI_API_TOKEN }}
      if: env.test_pypi_token == ''
      run: |
        echo "the secret \"TEST_PYPI_API_TOKEN\" is not available, so the pypi package cannot be uploaded to the test index site."
        echo "Please go to \"settings \> secrets \> actions\" to create it before trying to build the pip package."
        exit 1

    - uses: actions/checkout@v3
    - uses: mamba-org/setup-micromamba@v1
      with:
        micromamba-version: latest
        environment-name: pipbuild
        create-args: >-
          python=3.11
          pip
          build
        post-cleanup: all
        cache-environment: true

    - name: Build package
      run: python -m build

    - name: Create built package artifact ready for upload on release
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: dist/*
        retention-days: 7

  pip-test-build:  # check local install succeeds before uploading to test-pypi
    needs: [pip-build]
    if: needs.pip-build.result == 'success'
    runs-on: ubuntu-latest
    steps:
    - uses: mamba-org/setup-micromamba@v1
      with:
        micromamba-version: latest
        environment-name: pipbuild
        create-args: >-
          python=3.11
          pip
          build
        post-cleanup: all
        cache-environment: true

    - name: Download built package from same workflow
      uses: actions/download-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: dist/

    - name: try installing from local build
      run: |
        pip install ${{inputs.pip_args}} dist/${{ inputs.package_name }}-*.tar.gz

  pip-test-upload:  # upload to test-pypi and then check install from there succeeds
    needs: [pip-build, pip-test-build]
    environment: ${{ inputs.environment }}
    if: needs.pip-build.result == 'success' && needs.pip-test-build.result == 'success'
    runs-on: ubuntu-latest
    steps:
    - uses: mamba-org/setup-micromamba@v1
      with:
        micromamba-version: latest
        environment-name: pipbuild
        create-args: >-
          python=3.11
          pip
          build
        post-cleanup: all
        cache-environment: true

    - name: Download built package from same workflow
      uses: actions/download-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: dist/

    - name: Publish distribution ðŸ“¦ to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/

    - name: Get version without the v
      run: |
        TAG=${{ inputs.version }}
        echo "VERSION=${TAG#v}" >> $GITHUB_ENV

    - name: try installing from TestPyPI
      run: |
        cd ${{ runner.temp }}
        pip install ${{inputs.pip_args}} -i https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple ${{ inputs.package_name }}==${{ env.VERSION }}
